import streamlit as st
import streamlit.components.v1 as components
from streamlit_extras.stylable_container import stylable_container
import os
import base64
import re
from utils import *
from streamlit_float import *
from streamlit_extras.bottom_container import bottom


def get_page(task):
    st.set_page_config(layout="wide")

    # -------------------------------------------------- Basics --------------------------------------------------
    if task == 1:
        title = "1. Imitate Rhythm Blocks"
        instructions = """
        **You will imitate a single rhythm block repeated four times with a fixed pitch.**\n
        Here are the instructions for this task:
        1. Click the **Play** button to get a sense of the rhythm that you are going to imitate. 
        2. There are two sequencers below. In the first sequencer, the blue squares represent the moment when you need to press a key. If you follow the provided rhythm correctly, green squares will show up in the second sequencer. Otherwise, red squares will show up.
        3. When you are ready, press the **Record** button. If you would like to restart, press the **Stop** button and then press the Record button again. Only press ‘J’ when you imitate.
        4. After you complete the imitation, you can click **⚛︎ AI Assessment** and ImprovAIser will provide feedback.
        5. **NOTE: You are only allowed to press "J" in this task.**
        """
        total_subs = 5
    elif task == 2:
        title = "2. Try Different Pitches"
        instructions = """
        **You will imitate the previous rhythm blocks each repeated once with different pitches. These will be different combinations generated by ImprovAIser.**\n
        Here are the instructions for this task:
        1. Click the **Play** button to get a sense of the rhythm that you are going to imitate. 
        2. There are two sequencers below. In the first sequencer, the blue squares represent the moment when you need to press a key. If you follow the provided rhythm correctly, green squares will show up in the second sequencer. Otherwise, red squares will show up.
        3. When you are ready, press the **Record** button. If you would like to restart, press the **Stop** button and then press the Record button again. Only press ‘J’ when you imitate.
        4. After you complete the imitation, you can click **⚛︎ AI Assessment** and ImprovAIser will provide feedback.
        5. **NOTE: You can play all keys from "A" to ";" here. Try out different pitches!**
        """
        total_subs = 3
    elif task == 3:
        title = "3. ImprovAIsation Arena"
        instructions = """
        **In this task, you will play sections with fixed rhythms and different pitches.**\n
        Here are the instructions for this task:
        1. Whenever you press the keys, green squares will show up in the sequencer. No wrong answer here! 
        2. Still, please improvise with the previous in mind!
        3. When you are ready, press the **Record** button. If you would like to restart, press the **Stop** button and then press the Record button again. Only press ‘J’ when you imitate.
        4. After you complete the imitation, you can click **⚛︎ AI Assessment** and ImprovAIser will provide feedback.
        """
        total_subs = 1

    # -------------------------------------------------- States --------------------------------------------------
    # Define master session states
    if "current_task" not in st.session_state:
        st.session_state["current_task"] = 1
    # if st.session_state["current_task"] != task:
    #     st.warning("It seems like you haven't finished previous task(s). Please go back to the task you are currently on:)")
    #     return
    if "count" not in st.session_state:
        st.session_state["count"] = 0  # TODO

    # Define per-task session states
    if f"show_instruction_dialog_{task}" not in st.session_state:
        show_instruction_dialog(instructions, True)
        st.session_state[f"show_instruction_dialog_{task}"] = "whatever"
    if f"generate_message_{task}" not in st.session_state:
        st.session_state[f"generate_message_{task}"] = False
    if f"enable_next_{task}" not in st.session_state:
        st.session_state[f"enable_next_{task}"] = False
    if f"progress_{task}" not in st.session_state:
        st.session_state[f"progress_{task}"] = 0

    progress = st.session_state[f"progress_{task}"]

    # -------------------------------------------------- Interface --------------------------------------------------
    # st.set_page_config(layout="wide")

    vertical_alignment()
    # set_background_img("./background2.avif")
    # set_sidebar_img("./background2.avif")

    # Show title
    st.title(title)

    st.divider()

    if task != 3:
        # Define columns for 1. generating feedback, 2. directing to next subtask
        c1 = st.columns([2.5, 1, 1])

        # Generate feedback if asked to
        if st.session_state[f"generate_message_{task}"]:
            with st.chat_message("user"):
                if task == 1:
                    # feedback = assess_performance(1)
                    if not st.session_state["count"]:
                        feedback = "You're making progress! You got the last two bars just right, but try to pay more attention at the start of each bar. Focus on striking the key only on the first beat to match the given rhythm pattern more closely. Keep practicing—you’re getting there!"
                        st.session_state["count"] = 1
                    else:
                        feedback = "**Congratulations! 🎉** You've entered the sequence correctly with precise spacing and formatting. Now you can proceed to the next subtask!"
                        st.session_state["count"] = 0
                elif task == 2:
                    if not st.session_state["count"]:
                        feedback = "Greate work! You have got the perfect rhythm, no wonder you have nailed it in Task 1! However, try try not pressing the same keys too much in a row!"
                        st.session_state["count"] = 1
                    else:
                        feedback = "**Congratulations! 🎉** You've entered the sequence correctly with precise spacing and formatting. Now you can proceed to the next subtask!"
                        st.session_state["count"] = 0
                stream_msg(feedback)

            # Find the sign to enable next subtask
            st.session_state[f"generate_message_{task}"] = False
            pattern = r"Congratulations! 🎉"
            if re.search(pattern, feedback):
                st.session_state[f"enable_next_{task}"] = True

        # Column 1: generate feedback
        with c1[0]:
            with st.container(border=True):
                c3 = st.columns([0.3, 1])
                with c3[0]:
                    color_button(f"Progress: {progress}/{total_subs}", "#1c83e1", "container_progress", "button_progress",
                                 radius=5, disabled=True)
                with c3[1]:
                    st.progress(progress / total_subs)

        with c1[1]:
            if color_button("⚛︎ AI Assessment", "green", "container_gpt", "button_gpt"):
                st.session_state[f"generate_message_{task}"] = True
                st.rerun()

        # Column 2: next subtask
        with c1[2]:
            # Disable the button if current subtask isn't passed
            if not st.session_state[f"enable_next_{task}"]:
                color_button("Complete this to go next →", "#3A3B3C", "container_incomplete_next", "button_incomplete_next",
                             disabled=True)

            # Enable the button otherwise
            elif st.session_state[f"enable_next_{task}"]:
                if color_button("Next subtask →", "#357EC7", "container_next", "button_next"):
                    st.session_state[f"progress_{task}"] += 1
                    st.session_state[f"enable_next_{task}"] = False
                    st.rerun()

    else:
        c1 = st.columns(2)

        # Generate feedback if asked to
        if st.session_state[f"generate_message_{task}"]:
            with st.chat_message("user"):
                # feedback = assess_performance(1)
                if not st.session_state["count"]:
                    feedback = "Nice try! You have tried various rhythms in the improvisation, which proves you have learnt a lot! However, try not pressing the same keys too much in a row!"
                    stream_msg(feedback)
                    feedback = "**Final Score: 59 (not passed)**"
                    st.session_state["count"] = 1
                else:
                    feedback = "**Congratulations! 🎉** You have tried various rhythms in the improvisation, which proves you have learnt a lot! And the melody is just spot-on, covering a wide range of the provided keys, and flows on and on! It makes me wanna lhear more! Keep trying, you can do better!"
                    stream_msg(feedback)
                    feedback = "**Final Score: 75 (not passed)**"
                    st.session_state["count"] = 0
                stream_msg(feedback)
                if st.session_state["count"] == 0:
                    time.sleep(0.5)
                    st.balloons()
                    st.balloons()
                    st.balloons()

            # Find the sign to enable next subtask
            st.session_state[f"generate_message_{task}"] = False
            pattern = r"Congratulations! 🎉"
            if re.search(pattern, feedback):
                st.session_state[f"enable_next_{task}"] = True

        with c1[0]:
            if color_button("⚛︎ AI Assessment", "green", "container_gpt", "button_gpt"):
                st.session_state[f"generate_message_{task}"] = True
                st.rerun()
        with c1[1]:
            if color_button("🥊 Score Board 🥋", "Brown", "container_incomplete_next", "button_incomplete_next"):
                show_scoreboard()


    # Place product name on the top of sidebar
    sidebar_top("ImprovAIser")

    with st.sidebar:
        st.markdown("⚙︎ Tools")
        if color_button("❔ Instruction", "orange", "container_instruction", "button_instruction"):
            show_instruction_dialog(instructions, True)

        if color_button("⌾ Lower Pace", "#FF5F1F", "container_lower", "button_lower"):
            pass

        # st.divider()
        st.write("")

        st.markdown("♾ Manager Tools")
        if color_button("⇤ Override Previous", "grey", "container_O_previous", "button_O_previous"):
            pass

        if color_button("Override Next ⇥", "grey", "container_O_next", "button_O_next"):
            st.session_state[f"progress_{task}"] += 1
            st.session_state[f"enable_next_{task}"] = False
            st.rerun()

    if st.session_state[f"progress_{task}"] < total_subs:
        # Create a container for the main content
        main_container = st.container()

        # Get all audio files and convert them to data URLs
        notes_dir = os.path.join(os.path.dirname(__file__), f'html/task{task}/notes')
        audio_data = {}

        # Add the background loop first
        base_path = os.path.join(os.path.dirname(__file__), f'html/task{task}')
        try:
            audio_data['background'] = get_audio_data_url(os.path.join(base_path, '4-bar-loop.mp3'))
        except FileNotFoundError:
            st.error("Missing audio file: 4-bar-loop.mp3")

        # Then add piano notes
        for note in ['C4', 'D4', 'E4', 'G4', 'A4', 'C5', 'D5', 'E5', 'G5', 'A5']:
            audio_path = os.path.join(notes_dir, f"{note}.mp3")
            try:
                audio_data[note] = get_audio_data_url(audio_path)
            except FileNotFoundError:
                st.error(f"Missing audio file: {note}.mp3")

        # Create JavaScript code for audio data
        audio_js = f"""
        <script>
            const audioData = {str(audio_data)};
        </script>
        """

        base_path = os.path.join(os.path.dirname(__file__), f'html/task{task}')

        # Add the background loop
        try:
            audio_data['background'] = get_audio_data_url(os.path.join(base_path, '4-bar-loop.mp3'))
        except FileNotFoundError:
            st.error("Missing audio file: 4-bar-loop.mp3")

        with main_container:
            # Read all necessary files
            css_content = read_file_content(os.path.join(base_path, 'styles.css'))
            script_content = read_file_content(os.path.join(base_path, 'script.js'))
            sequencer_content = read_file_content(os.path.join(base_path, f'sequencer-{task}-{progress + 1}.js'))

            try:
                with open(os.path.join(base_path, 'index.html'), 'r', encoding='utf-8') as f:
                    task3_html = f.read()

                    # Create style and script tags
                    style_tag = f"<style>{css_content}</style>"
                    script_tags = f"""
                        {audio_js}
                        <script>{script_content}</script>
                        <script type="text/babel">{sequencer_content}</script>
                    """

                    # Insert CSS in head
                    task3_html = task3_html.replace('</head>', f'{style_tag}</head>', 1)
                    # Insert scripts at the end of body
                    task3_html = task3_html.replace('</body>', f'{script_tags}</body>', 1)

            except FileNotFoundError:
                st.error(f"Unable to find the file: {os.path.join(base_path, 'index.html')}")
                task3_html = "<p>Error: task3 HTML file not found.</p>"

            # Inject the component into the Streamlit app
            components.html(task3_html, height=700, scrolling=True)

    elif task != 3:
        with st.chat_message("user"):
            pass_congrats = """**Congratulations! 🎉**
            You have passed all the subtasks in this task. Please now proceed to the next task!
            """
            stream_msg(pass_congrats)
        time.sleep(0.5)
        st.balloons()
        st.balloons()
        st.balloons()
